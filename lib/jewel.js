// Generated by CoffeeScript 1.3.1
var Jewel, Model;

Function.prototype.clone = function() {
  var clone, property;
  clone = function() {};
  for (property in this) {
    if (this.hasOwnProperty(property)) {
      clone[property] = this[property];
    }
  }
  clone.prototype = this.prototype;
  return clone;
};

Jewel = (function() {

  Jewel.name = 'Jewel';

  function Jewel() {}

  Jewel.define = function(selector, options) {
    var model;
    if (options == null) {
      options = {};
    }
    model = Model.clone();
    model.prototype.selector = model.selector = selector;
    model.prototype.options = model.options = options;
    model.__defineGetter__('all', function() {
      return model.find();
    });
    model.prototype.model = model.model = model;
    return model;
  };

  return Jewel;

})();

Model = (function() {

  Model.name = 'Model';

  function Model() {}

  Model.prototype.init = function(element) {
    var e, key, _results, _results1;
    if (element instanceof HTMLElement) {
      this.element = element;
      if (this.options.keys) {
        _results = [];
        for (key in this.options.keys) {
          e = $(element).find(this.options.keys[key]);
          _results.push(this[key] = e.html());
        }
        return _results;
      }
    } else {
      _results1 = [];
      for (key in element) {
        _results1.push(this[key] = element[key]);
      }
      return _results1;
    }
  };

  Model.find = function(options) {
    var i, items, model, results;
    if (options == null) {
      options = {};
    }
    items = $(this.selector).children();
    results = void 0;
    if (items.length > 0) {
      if (options.skip || options.limit) {
        i = 0;
        results = [];
        while (true) {
          if (!items[i]) {
            break;
          }
          if (i >= (options.skip || -1) && i < (options.limit || items.length)) {
            model = new this.model;
            model.init(items[i]);
            results.push(model);
          }
          i++;
        }
      }
    }
    if (!results) {
      results = items;
    }
    return results;
  };

  Model.prototype.fields = function() {
    var fields, key, notFields;
    notFields = ['init', 'save', 'remove', 'selector', 'options', 'model'];
    fields = {};
    for (key in this) {
      if (-1 === notFields.indexOf(key)) {
        fields[key] = this[key];
      }
    }
    return fields;
  };

  Model.prototype.save = function() {
    if (!this.element) {
      return this.create();
    } else {
      return this.update();
    }
  };

  Model.prototype.create = function() {
    this.element = $(this.options.template(this.fields()));
    return this.element.prependTo(this.selector);
  };

  Model.prototype.update = function() {
    var fields, key, _results;
    fields = this.fields();
    _results = [];
    for (key in fields) {
      _results.push($(this.element).find(this.options.keys[key]).html(fields[key]));
    }
    return _results;
  };

  Model.prototype.remove = function() {
    return $(this.element).remove();
  };

  Model.remove = function() {
    return $(this.selector).remove();
  };

  return Model;

})();
